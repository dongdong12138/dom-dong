{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","insertNode","parentNode","insertBefore","nextSibling","before","append","childNode","appendChild","wrap","remove","removeChild","empty","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","parent","children","siblings","Array","from","filter","n","next","nextElementSibling","previous","previousElementSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.0b95baef.map","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n\r\n    /**\r\n     * 创建元素\r\n     * @param {String} string 标签的字符串形式\r\n     * @returns 元素\r\n     * \r\n     * 一开始使用 div 标签作为包裹容器，即 document.createElement('div')\r\n     * 发现问题：如果传入 td 等标签，会返回 undefined\r\n     * 原因是：根据 HTML 语法，td 只能放在 tr、table 等标签中，不能直接放在 div 中\r\n     * \r\n     * 所以将包裹容器改为 template 标签，即 document.createElement('template')\r\n     * template 标签本身就是一个包裹容器，可以包含任何标签\r\n     * 但是使用 template 标签，在获取第一个子元素时：\r\n     *      - 不能使用 container.children[0]\r\n     *      - 而应该使用 container.content.firstChild\r\n     */\r\n    create(string) {\r\n        const container = document.createElement('template')\r\n        container.innerHTML = string.trim()\r\n        return container.content.firstChild\r\n    },\r\n\r\n    /**\r\n     * 在目标节点后面插入节点\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {nodeObject} insertNode 插入节点\r\n     */\r\n    after(node, insertNode) {\r\n        node.parentNode.insertBefore(insertNode, node.nextSibling)\r\n    },\r\n\r\n    /**\r\n     * 在目标节点之前插入节点\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {nodeObject} insertNode 插入节点\r\n     */\r\n    before(node, insertNode) {\r\n        node.parentNode.insertBefore(insertNode, node)\r\n    },\r\n\r\n    /**\r\n     * 给父节点新增一个子节点\r\n     * @param {nodeObject} parentNode 父节点\r\n     * @param {nodeObject} childNode 子节点\r\n     */\r\n    append(parentNode, childNode) {\r\n        parentNode.appendChild(childNode)\r\n    },\r\n\r\n    /**\r\n     * 给目标节点增加一个父节点\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {nodeObject} parentNode 父节点\r\n     */\r\n    wrap(node, parentNode) {\r\n        dom.before(node, parentNode)\r\n        dom.append(parentNode, node)\r\n    },\r\n\r\n    /**\r\n     * 删除目标节点\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 被删除的节点\r\n     */\r\n    remove(node) {\r\n        node.parentNode.removeChild(node)\r\n        return node\r\n    },\r\n\r\n    /**\r\n     * 清空目标节点的子元素\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 被清空的子元素\r\n     */\r\n    empty(node) {\r\n        let { firstChild } = node\r\n        const array = []\r\n        while (firstChild) {\r\n            array.push(dom.remove(firstChild))\r\n            firstChild = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n\r\n    /**\r\n     * 获取或设置指定节点的属性\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} name 属性名\r\n     * @param {String} [value] 属性值(有属性值就是设置，无属性值就是获取)\r\n     */\r\n    attr(node, name, value) {\r\n        // 根据参数个数的不同，执行不同的代码，就是重载\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        }\r\n        if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取或设置指定节点的文本内容\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} [value] 文本内容(有参数就是设置，无参数就是获取)\r\n     * @returns 文本内容\r\n     */\r\n    text(node, value) {\r\n        if (arguments.length === 2) {\r\n            if (node.innerText) {           // 适配\r\n                node.innerText = value      // IE\r\n            } else {\r\n                node.textContent = value    // Firefox、Chrome\r\n            }\r\n        }\r\n        if (arguments.length === 1) {\r\n            if (node.innerText) {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取或设置指定节点的html内容\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} [value] html内容(有参数就是设置，无参数就是获取)\r\n     * @returns html内容\r\n     */\r\n    html(node, value) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = value\r\n        }\r\n        if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取或设置指定节点的 style\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String or Object} name String-获取CSS属性值, Object-设置CSS属性\r\n     * @param {String} [value] 设置的CSS属性值\r\n     */\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        }\r\n        if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div, 'color')\r\n                return node.style[name]\r\n            }\r\n            if (name instanceof Object) {\r\n                // dom.style(div, {color: 'red'})\r\n                for (let key in name) {\r\n                    node.style[key] = name[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 增加类名 / 移除类名 / 检测是否含有某个类名\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} className 类名\r\n     */\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 给指定节点新增事件\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} eventName 事件名称\r\n     * @param {Function} fn 执行函数\r\n     */\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n\r\n    /**\r\n     * 移除指定节点的某个事件\r\n     * @param {nodeObject} node 目标节点\r\n     * @param {String} eventName 事件名称\r\n     * @param {Function} fn 执行函数\r\n     */\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n\r\n    /**\r\n     * 查找元素\r\n     * @param {String} selector CSS选择器\r\n     * @param {nodeObject} [scope] 指定节点中查找元素\r\n     * @returns 元素数组\r\n     */\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n\r\n    /**\r\n     * 查找指定节点的父节点\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 父节点\r\n     */\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n\r\n    /**\r\n     * 查找指定节点的子元素\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 子元素\r\n     */\r\n    children(node) {\r\n        return node.children\r\n    },\r\n\r\n    /**\r\n     * 查找指定节点的兄弟元素\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 兄弟元素\r\n     */\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children).filter(n => n !== node)\r\n    },\r\n\r\n    /**\r\n     * 查找目标节点的后一个元素\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 后一个元素或 null\r\n     */\r\n    next(node) {\r\n        return node.nextElementSibling || null\r\n    },\r\n\r\n    /**\r\n     * 查找目标节点的前一个元素\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 前一个元素或 null\r\n     */\r\n    previous(node) {\r\n        return node.previousElementSibling || null\r\n    },\r\n\r\n    /**\r\n     * 遍历节点，并对每个节点调用函数\r\n     * @param {nodeArray} nodeList 节点伪数组\r\n     * @param {*} fn 执行函数\r\n     */\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i ++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取目标节点在所有兄弟元素中的索引\r\n     * @param {nodeObject} node 目标节点\r\n     * @returns 索引\r\n     */\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i ++) {\r\n            if (list[i] === node) break\r\n        }\r\n        return i\r\n    }\r\n    \r\n}"]}